@implements IDisposable
@inject RefreshContext refreshContext

@if (HasPostButton && postText == null)
{
    <div class="postbutton-container">
        <button class="button postbutton @(failureText != null ? "failure" : "")" @onclick="MakePost">
            @(failureText ?? "Consume these to make a new post (cannot be reversed!)")
        </button>
    </div>
}

@foreach (var post in posts)
{
    <div class="post">
        <ReportWidget post="@post" selection="@(active => SetSelection(post.id, active))" />
        <div class="body">@((MarkupString)post.html)</div>
        <ReportWidget post="@post" controls="true" />
    </div>
}

@if (postText != null)
{
    <textarea class="finaltext">@postText</textarea>
}

@code {
    [Parameter] public Db.PostState segment { get; set; }
    [Parameter] public int limit { get; set; } = int.MaxValue;
    [Parameter] public Db.LimitBehavior order { get; set; }

    private Db.Post[] posts = null;
    private HashSet<string> activeSelection = new HashSet<string>();

    private string postText = null;
    private string failureText = null;

    public bool HasPostButton
    {
        get => segment == Db.PostState.Approved;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Db.Instance.RegisterCallback(StateHasChangedThreadsafe);

        refreshContext.SetCallback(RereadPosts);
        RereadPosts();
    }

    private void RereadPosts()
    {
        posts = Db.Instance.ReadAllPosts(segment, limit, order);
        StateHasChangedThreadsafe();
    }

    public void StateHasChangedThreadsafe()
    {
        InvokeAsync(StateHasChanged).ContinueInBackground();
    }

    public void Dispose()
    {
        Db.Instance.UnregisterCallback(StateHasChangedThreadsafe);
    }

    public void SetSelection(string id, bool active)
    {
        if (active)
        {
            activeSelection.Add(id);
        }
        else
        {
            activeSelection.Remove(id);
        }
    }

    public void MakePost()
    {
        if (failureText != null || postText != null)
        {
            // no.
            return;
        }

        // Do the DB change
        Db.Instance.MoveToPosted(activeSelection, DateTimeOffset.Now);

        // Generate post text
        string result = "";
        foreach (var group in posts.Where(post => activeSelection.Contains(post.id)).OrderBy(post => post.creation).GroupBy(post =>
        {
            if (post.title.StartsWith("Culture War Roundup for the week of"))
            {
                return post.title.Replace("Culture War Roundup for the week of", "Contributions for the week of");
            }

            return "Quality Contributions in the Main Subreddit";
        }))
        {
            result += $"##{group.Key}\n\n";

            foreach (var post in group)
            {
                IEnumerable<string> lines = post.text.Split("\n").Where(line => !line.StartsWith(">"));
                string text = string.Join(" ", lines);
                IEnumerable<string> words = text.Split(new char[] { ' ', '\n', '\t' }).Where(word => word.Length > 0);
                string blurb = string.Join(" ", words.Take(20));    // TODO: split it based on character count, not word count?

                // These characters cause problems.
                blurb = blurb.Replace("[", "");
                blurb = blurb.Replace("]", "");
                blurb = blurb.Replace("*", "");
                blurb = blurb.Replace("_", "");

                string flavor = post.flavorTitle;
                if (flavor == "")
                {
                    flavor = blurb;
                }

                result += $"{post.GetAuthorLink()} on:\n\n* [{flavor}]({post.link}?context=3#context)\n\n";
            }
        }

        postText = result;

        // Clear it out!
        posts = new Db.Post[0];

        StateHasChanged();
    }
}
